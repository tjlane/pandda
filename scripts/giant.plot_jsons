#!/usr/bin/env cctbx.python

import giant.logs as lg
logger = lg.getLogger(__name__)

from giant.exceptions import Sorry, Failure
from giant.paths import easy_directory

import os, sys, json, collections
import math
import numpy as np
import pandas as pd

from giant import adopt_init_args

from pandemic.adp.plots import PlotHelper
helper = PlotHelper()

#######################################

blank_arg_prepend = {
    '.json' : 'input.json=',
}

import libtbx.phil
master_phil = libtbx.phil.parse("""
input {
    json = None
        .type = path
        .multiple = True
    json_paths = None
        .type = str
        .multiple = False
    json_label = None
        .type = str
        .multiple = True
}
options {
    keep_chain_ids = False
        .type = bool
    keep_residue_names = False
        .type = bool
    split_json_data_by_chain = True
        .type = bool
    y_min = 0
        .type = float
    y_max = None
        .type = float
}
output {
    out_dir = json_plots
        .type = path
}
""")

#######################################

def get_chain_from_pdb_str(pdb_str):
    return pdb_str[9]

def get_residue_number_from_pdb_str(pdb_str):
    return int(pdb_str[10:14])

def extract_path_from_json(json_data, json_path):

    if (not json_path):
        return json_data

    keys = json_path.split('.')

    for k in keys:
        json_data = json_data[k]

    return json_data

def sort_and_average(labels, values):

    uniq_x, y_arr = np.unique(labels, return_inverse=True)
    uniq_y = np.zeros_like(uniq_x, dtype=float)
    for i in range(len(uniq_y)):
        vals = values[y_arr == i]
        uniq_y[i] = np.mean(vals)
    return uniq_x, uniq_y

def make_dataframe_from_dicts(
    data_dicts,
    labels,
    splice_function = None,
    ):

    assert len(data_dicts) == len(labels)

    if (splice_function is None):
        splice_function = lambda x: x

    data_dicts_spliced = [{splice_function(k):v for k,v in d.iteritems()} for d in data_dicts]

    all_keys = set()
    for d in data_dicts_spliced:
        all_keys.update(d.keys())

    df_values = []
    for k in sorted(all_keys):
        row = [k] + [d.get(k, None) for d in data_dicts_spliced]
        df_values.append(tuple(row))

    # Make and return dataframe
    df = pd.DataFrame(
        data = df_values, 
        columns = ['key'] + list(labels),
    )
    df = df.set_index('key')

    return df

class SplicePdbstr:

    def __init__(self,
        keep_chain_id = True,
        keep_residue_name = True,
        ):

        self.keep_chain_id = keep_chain_id
        self.keep_residue_name = keep_residue_name

    def __call__(self, pdb_str):

        if (self.keep_chain_id is False):
            pdb_str = self.splice_chain_id(pdb_str, chain_id=' ')

        if (self.keep_residue_name is False):
            pdb_str = self.splice_residue_name(pdb_str, residue_name='   ')

        return pdb_str

    @staticmethod
    def splice_chain_id(pdb_str, chain_id):
        chain_id = str(chain_id)
        assert len(chain_id) == 1
        return ( pdb_str[:9] + chain_id + pdb_str[10:] )

    @staticmethod
    def splice_residue_name(pdb_str, residue_name):
        residue_name = str(residue_name)
        assert len(residue_name) == 3
        return ( pdb_str[:5] + residue_name + pdb_str[8:] )

class Plotter:

    def __init__(self, y_min=None, y_max=None):
        adopt_init_args(self, locals())
    
    def make_plot_from_dataframe(self,
        data_frame,
        filename,
        ):

        import numpy as np
        from matplotlib import pyplot

        labs = list(data_frame.index.values)

        fig, axis = pyplot.subplots(nrows=1, ncols=1)

        ############

        # New X-values
        residue_numbers = map(get_residue_number_from_pdb_str, labs)

        handles = []

        for c in list(data_frame.columns.values): 

            vals = data_frame[c]

            new_x, new_y = sort_and_average(
                labels = residue_numbers,
                values = vals,
            )

            axis.scatter(
                x = residue_numbers,
                y = vals,
                s = 1,
            )
        
            handles += axis.plot(new_x, new_y)
        
        axis.set_ylim(ymin=self.y_min, ymax=self.y_max)

        # Line plots for the averaged values
        axis.legend(
            handles = handles, 
            labels = list(data_frame.columns.values),
        )

        ############

        helper.write_and_close_fig(
            fig = fig,
            filename = filename,
        )

def run(params):

    lg.setup_logging(
        name = __name__,
    )

    json_files = params.input.json
    json_paths = params.input.json_paths
    json_labels = params.input.json_label

    easy_directory(params.output.out_dir)

    if (json_paths is not None):
        json_paths = json_paths.split(',')
        if len(json_paths) == 1:
            # Use same path for all files
            json_paths = json_paths * len(json_files)
        else:
            # Check same number of paths provided
            assert len(json_paths) == len(json_files)
    else:
        json_paths = [None] * len(json_files)

    if len(json_labels) > 0:
        assert len(json_labels) == len(json_files)
    else:
        json_labels = [os.path.splitext(f)[0] for f in json_files]

    splice_function = SplicePdbstr(
        keep_chain_id = params.options.keep_chain_ids,
        keep_residue_name = params.options.keep_residue_names,
    )

    plotter = Plotter(
        y_min = params.options.y_min,
        y_max = params.options.y_max,
    )

    all_json_data = []

    for i, json_f in enumerate(json_files):

        with open(json_f, 'r') as fh:
            json_data = json.loads(fh.read())

        json_p = json_paths[i]
        json_data = extract_path_from_json(
            json_data = json_data,
            json_path = json_p,
        )

        if (params.options.split_json_data_by_chain is True):
            chain_dict = {}
            for k, v in json_data.iteritems():
                c_id = get_chain_from_pdb_str(k)
                chain_dict.setdefault(c_id,{}).setdefault(k,v)
            for c_id, c_data in chain_dict.iteritems():
                all_json_data.append(
                    (json_labels[i]+'-chain_{}'.format(c_id), c_data)
                )
        else:
            all_json_data.append(
                (json_labels[i], json_data)
            )

    for i, (json_lab_1, json_1) in enumerate(all_json_data):
        for j, (json_lab_2, json_2) in enumerate(all_json_data[i+1:]):

            logger.heading('{} -- {}'.format(json_lab_1, json_lab_2))

            output_prefix = os.path.join(
                params.output.out_dir,
                '{}-{}'.format(json_lab_1, json_lab_2),
            )

            data_frame = make_dataframe_from_dicts(
                data_dicts = [json_1, json_2],
                labels = [json_lab_1, json_lab_2],
                splice_function = splice_function,
            )

            if len(data_frame) == 0:
                continue

            plotter.make_plot_from_dataframe(
                data_frame = data_frame,
                filename = (output_prefix + '.png'),
            )

    logger.heading('all vs all')

    output_prefix = os.path.join(
        params.output.out_dir,
        'all-vs-all',
    )

    all_labels, all_jsons = zip(*all_json_data)
    data_frame = make_dataframe_from_dicts(
        data_dicts = all_jsons,
        labels = all_labels,
        splice_function = splice_function,
    )

    if len(data_frame) > 0:

        plotter.make_plot_from_dataframe(
            data_frame = data_frame,
            filename = (output_prefix + '.png'),
        )

if __name__ == '__main__':
    from giant.jiffies import run_default
    run_default(
        run = run,
        master_phil = master_phil,
        args = sys.argv[1:],
        blank_arg_prepend = blank_arg_prepend,
    )

